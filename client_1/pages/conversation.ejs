<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messaging Interface</title>
    <!-- Include Tailwind CSS -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white">
    <div class="header fixed top-0 left-0 w-full p-4 pb-2 bg-gray-700">
        <h2 class="text-2xl font-bold mb-4">Conversation with <%= receiver.username %></h2>
    </div>
    <div class="container mx-auto px-4 py-24">
        <div class="message-container">
            <% messages.forEach(message => { %>
                <div class="message flex flex-col <%= message.sender._id.toString() === currentUser._id.toString() ? 'self-end items-end text-blue-300' : 'self-start items-start text-gray-300' %> mb-2">
                    <div class="max-w-xs rounded-lg p-3 bg-gray-800">
                        <%= message.content %>
                    </div>
                </div>
            <% }) %>
        </div>
    </div>

    <form id="messageForm" action="/conversations/<%= receiver._id %>" method="POST" class="fixed bottom-0 left-0 w-full bg-gray-800 p-4 flex items-center">
        <input id="message-content" type="text" name="content" placeholder="Type your message..." class="flex-grow px-3 py-2 rounded-lg border-gray-600 focus:border-blue-500 focus:ring focus:ring-blue-500 focus:ring-opacity-50 bg-gray-900 text-white">
        <button id="sendMessageButton" type="button" class="ml-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:bg-blue-600">Send</button>
        <div id="errorMessage" class="error-message hidden text-red-500 text-sm mt-1"></div>
    </form>

    <!-- Add this script to handle sending messages -->
    <script>
        document.getElementById('sendMessageButton').addEventListener('click', async function() {
            const content = document.getElementById('message-content').value.trim();
            const errorMessageElement = document.getElementById('errorMessage');
            errorMessageElement.classList.add('hidden'); // Hide error message initially

            if (!content) {
                errorMessageElement.innerText = 'Message content is required';
                errorMessageElement.classList.remove('hidden'); // Show error message
                return; // Exit function if content is empty
            }

            try {
                const response = await fetch(document.getElementById('messageForm').action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content })
                });

                if (!response.ok) {
                    const errorMessage = await response.json();
                    errorMessageElement.innerText = errorMessage.error;
                    errorMessageElement.classList.remove('hidden'); // Show error message
                } else {
                    document.getElementById('message-content').value = ''; // Clear input field
                    // Optionally, update the UI with the sent message
                }
            } catch (error) {
                console.error('Error sending message:', error);
                errorMessageElement.innerText = 'An unexpected error occurred. Please try again later.';
                errorMessageElement.classList.remove('hidden'); // Show error message
            }
        });
    </script>
</body>
</html>
